import unittest
from Controller import *
from utilities import *
from Car import *
from Node import Node
from Application import *
from OptimizationAlgorithm import OptimizationAlgorithm
from copy import copy, deepcopy

zero = 10**(-100)

class Test(unittest.TestCase):
    #Main simulation loop with car spawning and traffic jam recognising mechanisms removed
    def main_loop(self, test_map, visualise, max_iter = 300, break_on_flow = False):
        if visualise:
            win = pygame.display.set_mode((WIDTH, HEIGHT))   
            clock=pygame.time.Clock()
            test_map.img = pygame.transform.scale(pygame.image.load(r"images/black.jpg"),(WIDTH,HEIGHT)).convert()
            test_map.rect = pygame.Rect(0, 0, WIDTH, HEIGHT)
        Collisions = 0
        Flow = 0
        i=0
        while(True):
            i+=1
            if visualise:
                test_map.draw(win, True)
            for road in test_map.roads:
                for car in road.cars:
                    car.update_vision(road.direction, road.type, road.curve)
                    test_map.process_car_neighborhood(car, road)
            test_map.update_traffic_lights(i, 300)
            Flow+=test_map.move_cars( 0, 0)
            Collisions+=test_map.check_for_car_collision()
            if i >= max_iter or(Flow and break_on_flow):
                break
            if visualise:
                pygame.display.update()
                clock.tick(FPS)
                
        return Collisions, Flow
    
        #Test if cars correctly elave intersection
    def test_00_car_leaves_intersection(self):
        test_map = generate_test_map(1000,1000, False)
        
        car = test_map.spawn_car(4)
        
        _ , Flow = self.main_loop(test_map, visualise, max_iter = 300)
        
        for road in test_map.roads:
            self.assertEqual(len(road.cars), 0)
        self.assertEqual(Flow, 1) #Car has to leave intersection
    
    #Test of collision mechanisms
    def test_01_collisions(self):
        test_map = generate_test_map(1000,1000, False)
        
        car = test_map.spawn_car(zero)
        car.rect.center = (test_map.roads[0].end_node.pos[0],test_map.roads[0].end_node.pos[1]*3/4)
        car2 = test_map.spawn_car(6)
        car2.maximum_deceleration = zero
        
        Collisions , _ = self.main_loop(test_map, visualise, max_iter = 100)
        for road in test_map.roads:
            self.assertEqual(len(road.cars), 0)       
        self.assertEqual(Collisions, 1) #Cars have to collide
        
    #Test if cars will stop on red light
    def test_02_stopping_on_red_light(self):
        test_map = generate_test_map(1000,1000, True)
        for i in range(len(test_map.roads_with_lights)):
            test_map.roads_with_lights[i].light_cycle = [2,2,2,2] 
            test_map.roads_with_lights[i].light = 2
        
        car = test_map.spawn_car(3)
        _ , Flow = self.main_loop(test_map, visualise, max_iter = 200)
                
        self.assertEqual(Flow, 0) #Car can't leave road segment
        self.assertGreater(1/2, car.velocity) #Car has to stop(velocity smaller than 1/2)
        self.assertGreater(test_map.roads[0].end_node.pos[1], car.rect.center[1]+car.rect.height/2) #Car has to stop before end of segment
    
    #Test if cars stop when driver sees another stationary vehicle
    def test_03_stopping_to_vehicle(self):
        test_map = generate_test_map(1000,1000, False)
        
        car = test_map.spawn_car(zero**2)
        car.rect.center = test_map.roads[0].end_node.pos
        
        car2 = test_map.spawn_car(3)
        _ , Flow = self.main_loop(test_map, visualise, max_iter = 200)
                
        self.assertEqual(Flow, 0) #Cars can't leave road segment
        self.assertGreater(1, car2.velocity) #Car has to stop(velocity smaller than 1)
        self.assertGreaterEqual(car.rect.center[1], car2.rect.center[1]+car2.minimum_dist) #Car has to leave some space before vehicles
     
    #Test if car will slow down if positioned behined slower vehicle   
    def test_04_adjusting_velocity(self):
        test_map = generate_test_map(1000,1000, False)
        
        car = test_map.spawn_car(4)
        car.rect.center = (test_map.roads[0].end_node.pos[0],test_map.roads[0].end_node.pos[1]*3/4)
        
        car2 = test_map.spawn_car(6)
        Collisions , _ = self.main_loop(test_map, visualise, max_iter = 100)
                
        self.assertGreater(6, car2.velocity) #Second car has to lower velocity
        self.assertGreaterEqual(car2.velocity, 4) #Second car can't go slower than the first one
        self.assertGreaterEqual(car.rect.center[1], car2.rect.center[1]+car2.minimum_dist) #Car has to leave some space before vehicles
        self.assertEqual(Collisions, 0) #Cars cannot collide

    #Test if car driving straight will have priority on car turning left
    def test_05_car_priority_straight(self):
        test_map = generate_one_straight_one_left_turn(1000,1000)
        
        node = test_map.starting_nodes[0]
        car = Car(node.pos, 180, WIDTH, HEIGHT, 3)
        node.exiting_roads[0].cars.append(car)
        
        node2 = test_map.starting_nodes[1]
        car2 = Car(node2.pos, 0, WIDTH, HEIGHT, 3)
        node2.exiting_roads[0].cars.append(car2)
        
        Collisions , Flow = self.main_loop(test_map, visualise, max_iter = 350)
        
        cars = []
        for road in test_map.roads:
            for car in road.cars:
                cars.append(car)
                
        self.assertEqual(Flow, 1) #One car has o leave intersection
        self.assertEqual(len(cars), 1)
        self.assertEqual(cars[0], car) #It has to be a car driving in a straight line
        self.assertEqual(Collisions, 0) #Cars cannot collide
    
    #Test if car that has already turned will have priority over car driving straight
    def test_06_car_priority_turning(self):
        test_map = generate_one_straight_one_left_turn(1000,1000)
        
        node = test_map.starting_nodes[0]
        car = Car(node.pos, 180, WIDTH, HEIGHT, 3.7)
        node.exiting_roads[0].cars.append(car)
        
        node2 = test_map.starting_nodes[1]
        car2 = Car(node2.pos, 0, WIDTH, HEIGHT, 3)
        node2.exiting_roads[0].cars.append(car2)
        
        Collisions , Flow = self.main_loop(test_map, visualise, max_iter = 400, break_on_flow = True)
        
        cars = []
        for road in test_map.roads:
            for car in road.cars:
                cars.append(car)
                
        self.assertEqual(Flow, 1) #One car has o leave intersection
        self.assertEqual(len(cars), 1)
        self.assertEqual(cars[0], car2) #It has to be a car turning
        self.assertEqual(Collisions, 0) #Cars cannot collide
    
    #Test if crossover mechanism works correctly  
    def test_07_crossover(self):
        np.random.seed(123)
        ga = GeneticAlgorithm(10, 1000, speed_limit_optimization=True, traffic_light_optimization=True, elite_part=0.3, population_size=10, population_number=5, mutation_probability=0.2, speed_limit=10, crossover_probability=0.2, migration_part=0.1)
        parent1 = {'speed_limit': 10, 'light_cycles': [[0.2, 0.1, 0.8, 0.5], [0.2, 0.1, 0.8, 0.5], [0.2, 0.1, 0.8, 0.5], [0.2, 0.1, 0.8, 0.5]]}
        parent2 = {'speed_limit': 25, 'light_cycles': [[0.0, 0.7, 0.3, 0.9], [0.0, 0.7, 0.3, 0.9], [0.0, 0.7, 0.3, 0.9], [0.0, 0.7, 0.3, 0.9]]}
        child = ga.crossover(parent1, parent2)
        
        self.assertEqual(child['speed_limit'], 10)
        expected_tl = [[0.0, 0.7, 0.3, 0.9], [0.0, 0.7, 0.3, 0.9], [0.2, 0.1, 0.8, 0.5], [0.0, 0.7, 0.3, 0.9]]
        for i in range(4):
            self.assertEqual(child['light_cycles'][i], expected_tl[i])
    

    #Test if mutation changes parameters
    def test_08_mutation(self):
        #Test if mutation changes random parameter
        oa = OptimizationAlgorithm(iterations=1, simulation_length=1, speed_limit_optimization=True, traffic_light_optimization=True)
        speed_limit, light_cycles = (5,[[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7]])
        
        new_speed_limit, new_light_cycles = oa.mutate(copy(speed_limit),copy(light_cycles))
        variables = light_cycles
        variables.append(speed_limit)
        variables_new = new_light_cycles
        variables_new.append(new_speed_limit)
        
        self.assertNotEqual(variables, variables_new)#we want parameters changed
        
    #Test if mutation changes correct parameters   
    def test_09_mutation_specific(self):
        #Test if mutation changes speed limit
        oa = OptimizationAlgorithm(iterations=1, simulation_length=1, speed_limit_optimization=True, traffic_light_optimization=False)
        speed_limit, light_cycles = (5,[[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7]])
        new_speed_limit, new_light_cycles = oa.mutate(copy(speed_limit),copy(light_cycles))
        
        self.assertNotEqual(speed_limit, new_speed_limit)#we want speed limit changed
        self.assertEqual(light_cycles, new_light_cycles)#we want light cycles unchanged
        
        #Test if mutation changes light cycles
        oa = OptimizationAlgorithm(iterations=1, simulation_length=1, speed_limit_optimization=False, traffic_light_optimization=True)
        speed_limit, light_cycles = (5,[[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7],[0.1,0.2,0.6,0.7]])
        new_speed_limit, new_light_cycles = oa.mutate(speed_limit,light_cycles)
        
        self.assertEqual(speed_limit, new_speed_limit)#we want speed limit unchanged
        self.assertNotEqual(light_cycles, new_light_cycles)#we want light cycles changed
        
    # Test if conversion of units is done correctly   
    def test_10_name(self):
        from utilities import kilometers_per_hour_to_pixels, pixels_to_kmh
        self.assertAlmostEqual(kilometers_per_hour_to_pixels(pixels_to_kmh(10)), 10)
        
    # Test if Pareto comparison is implemented correctly
    def test_11_Pareto_comparison(self):
        ga = GeneticAlgorithm(100, 100, True, True,
                        elite_part=0.1, 
                        population_size=10, 
                        speed_limit=20, 
                        crossover_probability=0.2, 
                        mutation_probability=0.6, 
                        population_number=2,
                        migration_part=0.2) 
        
        # Pareto comparison checks relation of two statistic vectors, which have form of [Flow, -Collision]
        # vector1 dominates vector2 iff one statistic from vector1 is > than same statistic of vector2 
        # and other statistic of vector1 is not less than the corresponding statistic of vector2
        # if it is less, than none of vectors is dominating, same applies if vectors have equal statistics
        self.assertEqual(ga.pareto_compare([1, -1], [1, -1]), 0)
        self.assertEqual(ga.pareto_compare([2, -2], [1, -1]), 0)
        self.assertEqual(ga.pareto_compare([1, 0], [1, -1]), 1)
        self.assertEqual(ga.pareto_compare([2, -1], [1, -1]), 1)
        self.assertEqual(ga.pareto_compare([1, -1], [1, 0]), 2)
    
    # Test if champions list in genetic algorithm is updated correctly
    def test_12_champions_update(self):
        # potential champions(units, which were not dominated in their populations)
        # during cost calculations are appended to self.champions
        # (their stats go to self.champions_stats)
        # later some candidates are filtered out, if there are champions on the list, which dominate them
        # this test checks if this filtering/update is done correctly

        # sample GeneticAlgorithm instance
        ga = GeneticAlgorithm(100, 100, True, True,
                        elite_part=0.1, 
                        population_size=10, 
                        speed_limit=20, 
                        crossover_probability=0.2, 
                        mutation_probability=0.6, 
                        population_number=2,
                        migration_part=0.2) 
        
        champions = [{'tl': [[0.1, 0.2, 0.3, 0.4], [0.1, 0.2, 0.3, 0.4], [0.1, 0.2, 0.3, 0.4], [0.1, 0.2, 0.3, 0.4]], # candidate 1
                      's': 20.0},
                    {'tl': [[0.1, 0.4, 0.9, 0.8], [0.1, 0.4, 0.9, 0.8], [0.1, 0.4, 0.9, 0.8], [0.1, 0.4, 0.9, 0.8]], # candidate 2
                     's': 10.3},
                    {'tl': [[0.5, 0.5, 0.7, 0.4], [0.5, 0.5, 0.7, 0.4], [0.5, 0.5, 0.7, 0.4], [0.5, 0.5, 0.7, 0.4]], # candidate 3
                     's': 14.0},
                    {'tl': [[0.0, 0.4, 0.5, 0.6], [0.0, 0.4, 0.5, 0.6], [0.0, 0.4, 0.5, 0.6], [0.0, 0.4, 0.5, 0.6]], # candidate 4
                     's': 23.1}]
        ga.champions = deepcopy(champions)
        champions_stats = [[200, -0.33], # stats of candidate 1
                           [300, -0.33], # stats of candidate 2
                           [100, -0.0], # stats of candidate 3
                           [400, -2.33]] # stats of candidate 4
        ga.champions_stats = deepcopy(champions_stats)
        
        ga.update_champions()

        # only candidate with index 0 should be filtered out as he is dominated by candidate with index 1
        self.assertEqual(len(ga.champions), 3)
        self.assertEqual(len(ga.champions_stats), 3)
        
        self.assertEqual(ga.champions[0]['tl'], champions[1]['tl'])
        self.assertEqual(ga.champions[0]['s'], champions[1]['s'])
        self.assertEqual(ga.champions_stats[0], champions_stats[1])

        self.assertEqual(ga.champions[1]['tl'], champions[2]['tl'])
        self.assertEqual(ga.champions[1]['s'], champions[2]['s'])
        self.assertEqual(ga.champions_stats[1], champions_stats[2])

        self.assertEqual(ga.champions[2]['tl'], champions[3]['tl'])
        self.assertEqual(ga.champions[2]['s'], champions[3]['s'])
        self.assertEqual(ga.champions_stats[2], champions_stats[3])
        
        
    #Testing if cars decelerate correctly
    def test_13_deceleration(self):
        n = 1000
        x_range = np.array(range(n))
        y_range = [0 for i in range((n))]
        WIDTH, HEIGHT = 1000, 1000
        position, angle, speed_limit = (100, 0), 180, 15
        car = Car(position, angle, WIDTH, HEIGHT, speed_limit)
        car.velocity = 10
        for x in x_range:
            
            leading_dist=x + car.minimum_dist
            car2 = Car((position[0] + leading_dist, position[1]), angle, WIDTH, HEIGHT, 5)
            car.nearest_car = car2
            car.update_acceleration()
            y_range[x] = car.acceleration
            car.velocity = 10
        y_range_expected=[-2.9741123336830615, -2.8924764119276647, -2.812446419484509, -2.733980508782567, -2.657038186512299, -2.58158026137248, -2.507568794154155, -2.4349670500430376, -2.3637394530283506, -2.2938515423124963, -2.225269930621807, -2.1579622643242127, -2.091897185264865, -2.027044294235683, -1.9633741159993416, -1.9008580657925522, -1.8394684172376152, -1.7791782715949251, -1.7199615282927843, -1.6617928566742695, -1.6046476689040023, -1.5485020939807503, -1.4933329528045602, -1.4391177342498152, -1.385834572198073, -1.3334622234869755, -1.281980046733663, -1.2313679819933245, -1.1816065312154205, -1.1326767394620463, -1.084560176854663, -1.0372389212170674, -0.990695541384107, -0.9449130811471091, -0.89987504380841, -0.8555653773187171, -0.8119684599723147, -0.7690690866363039, -0.726852455491207, -0.6853041552613619, -0.6444101529145305, -0.604156781811124, -0.5645307302843481, -0.5255190306334776, -0.4871090485132372, -0.4492884727031048, -0.41204530524105776, -0.3753678519070065, -0.3392447130418095, -0.30366477468843645, -0.26861720004240075, -0.2340914211991998, -0.20007713118702375, -0.16656427627351533, -0.13354304853587307, -0.10100387868402239, -0.06893742912708012, -0.03733458727370742, -0.00618645905739168, 0.024515637321936623, 0.05478017744817354, 0.084615436539067, 0.1140294951035421, 0.14303024441353784, 0.1716253917972841, 0.19982246576063734, 0.22762882094283432, 0.2550516429127567, 0.2820979528115286, 0.3087746118470802, 0.3350883256460109, 0.3610456484679365, 0.3866529872872424, 0.4119166057470056, 0.43684262798963003, 0.46143704236857097, 0.4857057050453548, 0.5096543434759186, 0.5332885597901496, 0.5566138340683437, 0.5796355275181737, 0.6023588855555766, 0.6247890407929044, 0.6469310159374806, 0.6687897266036393, 0.6903699840411832, 0.7116764977830754, 0.732713878215109, 0.7534866390701427, 0.7739991998494471, 0.7942558881735726, 0.814260942065077, 0.8340185121653594, 0.8535326638877696, 0.8728073795090721, 0.8918465602012784, 0.9106540280057804, 0.9292335277516472, 0.9475887289198934, 0.9657232274554355, 0.9836405475284193, 1.0013441432465249, 1.0188374003198053, 1.0361236376795433, 1.0532061090525962, 1.0700880044925971, 1.086772451869375, 1.103262518317886, 1.1195612116479046, 1.1356714817156965, 1.1515962217588251, 1.167338269695232, 1.1829004093876767, 1.1982853718745803, 1.213495836568303, 1.2285344324218228, 1.2434037390647708, 1.2581062879097444, 1.2726445632297714, 1.2870210032077884, 1.3012380009589701, 1.3152979055266876, 1.3292030228528924, 1.342955616723662, 1.3565579096906282, 1.3700120839690026, 1.3833202823128603, 1.3964846088683485, 1.4095071300054474, 1.4223898751289028, 1.4351348374689188, 1.4477439748521923, 1.4602192104538392, 1.472562433530756, 1.4847755001369363, 1.496860233821251, 1.508818426308181, 1.520651838161969, 1.5323621994346655, 1.5439512102984996, 1.5554205416630147, 1.5667718357773819, 1.5780067068183032, 1.589126741463891, 1.6001334994539056, 1.611028514136724, 1.6218132930033948, 1.632489318209127, 1.64305804708255, 1.6535209126230697, 1.663879323986642, 1.6741346669602644, 1.6842883044254913, 1.6943415768112546, 1.7042958025362802, 1.7141522784413614, 1.7239122802117657, 1.7335770627900196, 1.7431478607793327, 1.7526258888378956, 1.7620123420642875, 1.7713083963742249, 1.7805152088688687, 1.7896339181949117, 1.798665644896648, 1.8076114917602306, 1.8164725441503198, 1.8252498703393027, 1.8339445218292834, 1.8425575336670155, 1.8510899247519557, 1.859542698137613, 1.8679168413263543, 1.8762133265578325, 1.8844331110911912, 1.8925771374812033, 1.9006463338484867, 1.908641614143944, 1.916563878407572, 1.9244140130217677, 1.9321928909592694, 1.9399013720258687, 1.9475403030980036, 1.9551105183553725, 1.9626128395086762, 1.9700480760226091, 1.9774170253342114, 1.9847204730666939, 1.99195919323884, 1.9991339484700894, 2.006245490181407, 2.013294558792034, 2.0202818839122196, 2.0272081845320207, 2.034074169206267, 2.0408805362357865, 2.0476279738449534, 2.054317160355679, 2.060948764357889, 2.0675234448766027, 2.0740418515356636, 2.080504624718216, 2.0869123957239917, 2.093265786923484, 2.0995654119090763, 2.1058118756431945, 2.1120057746035523, 2.1181476969255506, 2.124238222541896, 2.130277923319504, 2.136267363193742, 2.1422070983000685, 2.1480976771031406, 2.153939640523425, 2.159733522061381, 2.16547984791927, 2.17117913712063, 2.1768319016274824, 2.1824386464553047, 2.187999869785834, 2.193516063077728, 2.198987711175155, 2.2044152924143288, 2.209799278728057, 2.2151401357483316, 2.2204383229070066, 2.225694293534606, 2.2309084949572955, 2.236081368592067, 2.2412133500401614, 2.2463048691787746, 2.2513563502510854, 2.2563682119546264, 2.2613408675280526, 2.2662747248363204, 2.2711701864543286, 2.276027649749038, 2.2808475069601113, 2.2856301452790984, 2.290375946927199, 2.2950852892316314, 2.299758544700637, 2.304396081097143, 2.308998261511121, 2.313565444430656, 2.3180979838117604, 2.322596229146955, 2.327060525532643, 2.3314912137352986, 2.3358886302564965, 2.340253107396807, 2.3445849733185753, 2.3488845521076076, 2.3531521638337884, 2.3573881246106514, 2.361592746653918, 2.3657663383390286, 2.369909204257688, 2.374021645273439, 2.3781039585762893, 2.382156437736402, 2.386179372756877, 2.3901730501256373, 2.3941377528664316, 2.3980737605889804, 2.4019813495382776, 2.4058607926430593, 2.4097123595634633, 2.4135363167378916, 2.417332927429088, 2.4211024517694506, 2.424845146805596, 2.4285612665421743, 2.432251061984971, 2.435914781183293, 2.439552669271656, 2.443164968510792, 2.4467519183279816, 2.4503137553567287, 2.4538507134757896, 2.4573630238475666, 2.4608509149558775, 2.464314612643116, 2.467754340146811, 2.471170318135597, 2.4745627647446047, 2.47793189561029, 2.4812779239046954, 2.4846010603691777, 2.487901513347583, 2.49117948881891, 2.494435190429445, 2.4976688195243915, 2.500880575179002, 2.504070654229218, 2.5072392513018293, 2.510386558844159, 2.513512767153287, 2.516618064404815, 2.5197026366811834, 2.52276666799955, 2.5258103403392362, 2.528833833668746, 2.531837325972372, 2.534820993276387, 2.537785009674839, 2.5407295473549447, 2.5436547766220974, 2.5465608659244934, 2.5494479818773828, 2.552316289286951, 2.555165951173837, 2.5579971287963015, 2.560809981673035, 2.5636046676056337, 2.5663813427007263, 2.5691401613917777, 2.5718812764605627, 2.5746048390583174, 2.5773109987265768, 2.5799999034177032, 2.5826716995151084, 2.5853265318531764, 2.587964543736893, 2.5905858769611845, 2.5931906718299715, 2.5957790671749432, 2.5983512003740574, 2.600907207369769, 2.6034472226869925, 2.605971379450801, 2.608479809403872, 2.610972642923677, 2.6134500090394224, 2.6159120354487473, 2.6183588485341787, 2.6207905733793497, 2.6232073337849893, 2.6256092522846757, 2.62799645016037, 2.630369047457727, 2.632727163001187, 2.6350709144088524, 2.637400418107156, 2.639715789345319, 2.642017142209607, 2.6443045896373807, 2.646578243430957, 2.648838214271266, 2.651084611731324, 2.6533175442895125, 2.6555371193426764, 2.6577434432190388, 2.659936621190932, 2.6621167574873588, 2.664283955306373, 2.666438316827293, 2.668579943222749, 2.6707089346705564, 2.6728253903654338, 2.6749294085305566, 2.6770210864289545, 2.6791005203747513, 2.6811678057442516, 2.683223036986879, 2.6852663076359633, 2.687297710319384, 2.689317336770064, 2.6913252778363317, 2.693321623492133, 2.695306462847114, 2.697279884156561, 2.6992419748312155, 2.7011928214469516, 2.703132509754327, 2.705061124688004, 2.7069787503760523, 2.708885470149119, 2.710781366549483, 2.7126665213399894, 2.714541015512863, 2.7164049292984096, 2.7182583421736, 2.7201013328705423, 2.7219339793848434, 2.7237563589838616, 2.7255685482148504, 2.7273706229129964, 2.7291626582093547, 2.7309447285386788, 2.73271690764715, 2.7344792686000075, 2.7362318837890793, 2.737974824940216, 2.7397081631206306, 2.741431968746141, 2.743146311588323, 2.7448512607815703, 2.7465468848300647, 2.748233251614656,2.7499104283996583, 2.751578481839555, 2.7532374779856226, 2.7548874822924705, 2.7565285596244946, 2.7581607742622554, 2.7597841899087694, 2.7613988696957277, 2.7630048761896333, 2.764602271397859, 2.766191116774637, 2.7677714732269676, 2.7693434011204556, 2.770906960285076, 2.7724622100208673, 2.774009209103553, 2.7755480157900965, 2.7770786878241833, 2.7786012824416417, 2.780115856375789, 2.7816224658627204, 2.7831211666465268, 2.784612013984453, 2.7860950626519876, 2.7875703669478997, 2.789037980699204, 2.7904979572660737, 2.7919503495466897, 2.7933952099820325, 2.794832590560615, 2.796262542823161, 2.797685117867224, 2.799100366351753, 2.8005083385016007, 2.8019090841119834, 2.803302652552879, 2.8046890927733803, 2.8060684533059934, 2.807440782270884, 2.8088061273800733, 2.8101645359415883, 2.8115160548635565, 2.8128607306582563, 2.8141986094461204, 2.815529736959689, 2.8168541585475193, 2.8181719191780448, 2.819483063443397, 2.8207876355631747, 2.822085679388173, 2.823377238404068, 2.8246623557350605, 2.8259410741474733, 2.8272134360533125, 2.8284794835137803, 2.829739258242754, 2.830992801610221, 2.8322401546456764, 2.8334813580414773, 2.8347164521561665, 2.8359454770177477, 2.8371684723269337, 2.8383854774603487, 2.839596531473701, 2.840801673104912, 2.842000940777221, 2.8431943726022406, 2.8443820063829888, 2.8455638796168814, 2.8467400294986924, 2.8479104929234795, 2.8490753064894783, 2.8502345065009638, 2.851388128971077, 2.8525362096246245, 2.8536787839008433, 2.8548158869561355, 2.8559475536667724, 2.8570738186315694, 2.8581947161745314, 2.859310280347465, 2.860420544932569, 2.8615255434449876, 2.862625309135342, 2.863719874992233, 2.8648092737447115, 2.865893537864728, 2.8669726995695513, 2.8680467908241614, 2.8691158433436166, 2.870179888595396, 2.8712389578017143, 2.8722930819418107, 2.873342291754217, 2.874386617738996, 2.875426090159961, 2.8764607390468657, 2.8774905941975737, 2.878515685180205, 2.879536041335258, 2.880551691777708, 2.8815626653990853, 2.882568990869529, 2.8835706966398202, 2.8845678109433934, 2.8855603617983245, 2.8865483770093006, 2.887531884169566, 2.8885109106628493, 2.8894854836652706, 2.890455630147225, 2.891421376875251, 2.8923827504138746, 2.893339777127439, 2.8942924831819083, 2.8952408945466597, 2.8961850369962505, 2.897124936112171, 2.8980606172845764, 2.898992105714002, 2.8999194264130597, 2.9008426042081172, 2.9017616637409605, 2.902676629470436, 2.903587525674081, 2.9044943764497315, 2.9053972057171173, 2.9062960372194393, 2.9071908945249296, 2.908081801028398, 2.908968779952759, 2.909851854350548, 2.910731047105416, 2.911606380933615, 2.9124778783854626, 2.9133455618467967, 2.9142094535404124, 2.9150695755274842, 2.9159259497089742, 2.916778597827028, 2.917627541466354, 2.9184728020555877, 2.919314400868646, 2.9201523590260656, 2.9209866974963274, 2.921817437097168, 2.9226445984968796, 2.9234682022155947, 2.924288268626558, 2.925104817957388, 2.9259178702913236, 2.9267274455684573, 2.9275335635869615, 2.9283362440042953, 2.9291355063384055, 2.9299313699689105, 2.9307238541382783, 2.9315129779529867, 2.9322987603846764, 2.933081220271291, 2.933860376318206, 2.934636247099347, 2.9354088510582956, 2.9361782065093873, 2.936944331638795, 2.937707244505605, 2.9384669630428815, 2.9392235050587177, 2.9399768882372834, 2.9407271301398556, 2.941474248205843, 2.9422182597537985, 2.9429591819824243, 2.9436970319715656, 2.944431826683193, 2.945163582962379, 2.945892317538264, 2.9466180470250105, 2.9473407879227524, 2.948060556618531, 2.948777369387225, 2.9494912423924684, 2.950202191687565, 2.950910233216389, 2.951615382814278, 2.9523176562089213, 2.9530170690212336, 2.953713636766226, 2.954407374853866, 2.9550982985899275, 2.9557864231768396, 2.956471763714518, 2.957154335201196, 2.957834152534246, 2.9585112305109895, 2.9591855838295045, 2.9598572270894214, 2.9605261747927165, 2.9611924413444903, 2.9618560410537467, 2.9625169881341593, 2.963175296704833, 2.9638309807910588, 2.9644840543250597, 2.9651345311467314, 2.9657824250043747, 2.9664277495554243, 2.967070518367165, 2.9677107449174476, 2.968348442595395, 2.9689836247021013, 2.969616304451325, 2.970246494970179, 2.9708742092998075, 2.971499460396064, 2.972122261130179, 2.9727426242894204, 2.9733605625777533, 2.9739760886164874, 2.974589214944923, 2.9751999540209897, 2.9758083182218775, 2.976414319844667, 2.9770179711069478, 2.977619284147435, 2.9782182710265825, 2.978814943727182, 2.979409314154968, 2.980001394139207, 2.980591195433291, 2.981178729715315, 2.9817640085886614, 2.9823470435825667, 2.982927846152694, 2.9835064276816934, 2.98408279947976, 2.9846569727851877, 2.9852289587649157, 2.9857987685150715, 2.98636641306151, 2.9869319033603476, 2.9874952502984873, 2.988056464694146, 2.9886155572973743, 2.989172538790568, 2.9897274197889816, 2.990280210841232, 2.990830922429801, 2.9913795649715316, 2.9919261488181212, 2.992470684256609, 2.9930131815098617, 2.9935536507370513, 2.9940921020341316, 2.9946285454343093, 2.995162990908513, 2.9956954483658547, 2.996225927654089, 2.99675443856007, 2.9972809908102027, 2.9978055940708868, 2.9983282579489665, 2.9988489919921646, 2.999367805689522, 2.9998847084718294, 3.0003997097120543, 3.000912818725767, 3.0014240447715634, 3.00193339705148, 3.002440884711408, 3.002946516841508, 3.003450302476611, 3.003952250596627, 3.0044523701269417, 3.004950669938817, 3.0054471588497793, 3.0059418456240152, 3.0064347389727537, 3.0069258475546525, 3.0074151799761766, 3.007902744791977, 3.0083885505052623, 3.0088726055681723, 3.0093549183821433, 3.0098354972982735, 3.0103143506176844, 3.0107914865918803, 3.0112669134231016, 3.0117406392646795, 3.0122126722213833, 3.0126830203497703, 3.0131516916585257, 3.0136186941088066, 3.0140840356145784, 3.014547724042951, 3.0150097672145106, 3.01547017290365, 3.0159289488388956, 3.0163861027032306, 3.016841642134419, 3.0172955747253214, 3.0177479080242153, 3.0181986495351056, 3.018647806718037, 3.019095386989403, 3.0195413977222514, 3.0199858462465894, 3.0204287398496827, 3.020870085776355, 3.0213098912292846, 3.021748163369299, 3.0221849093156647, 3.0226201361463767, 3.023053850898447, 3.0234860605681866, 3.023916772111489, 3.0243459924441103, 3.024773728441946, 3.0251999869413067, 3.0256247747391916, 3.0260480985935585, 3.0264699652235945, 3.02689038130998, 3.0273093534951547, 3.0277268883835813, 3.0281429925420023, 3.028557672499702, 3.0289709347487586, 3.029382785744303, 3.029793231904767, 3.030202279612135, 3.030609935212192, 3.031016205014769, 3.031421095293988, 3.0318246122885055, 3.0322267622017485, 3.032627551202158, 3.033026985423422, 3.033425070964712, 3.0338218138909148, 3.0342172202328648, 3.0346112959875713, 3.035004047118447, 3.035395479555535, 3.035785599195729, 3.0361744119029996, 3.036561923508611, 3.0369481398113427, 3.037333066577703, 3.037716709542149, 3.038099074407295, 3.038480166844128, 3.0388599924922164, 3.0392385569599196, 3.0396158658245938, 3.039991924632799, 3.0403667389005005, 3.040740314113274, 3.0411126557265042, 3.0414837691655854, 3.0418536598261174, 3.042222333074103, 3.0425897942461435, 3.042956048649629, 3.043321101562932, 3.0436849582355974, 3.044047623888531, 3.044409103714187, 3.0447694028767534, 3.0451285265123365, 3.045486479729145, 3.0458432676076703, 3.0461988952008667, 3.046553367534332, 3.046906689606483, 3.047258866388733, 3.0476099028256662, 3.0479598038352123, 3.0483085743088156, 3.0486562191116113, 3.049002743082589, 3.0493481510347658, 3.0496924477553518, 3.050035638005915, 3.050377726522548, 3.0507187180160296, 3.0510586171719867, 3.0513974286510583, 3.051735157089052, 3.0520718070971027, 3.0524073832618335, 3.052741890145507, 3.0530753322861846, 3.0534077141978777, 3.0537390403707017, 3.054069315271027, 3.0543985433416307, 3.0547267290018443, 3.055053876647704, 3.0553799906520944,3.0557050753649, 3.056029135113146, 3.0563521742011432, 3.0566741969106315, 3.056995207500922, 3.0573152102090364, 3.0576342092498496, 3.0579522088162254, 3.0582692130791553, 3.058585226187897, 3.0589002522701074, 3.0592142954319796, 3.059527359758375, 3.0598394493129586, 3.0601505681383268, 3.0604607202561422, 3.060769909667263, 3.0610781403518694, 3.0613854162695944, 3.0616917413596494, 3.061997119540952, 3.0623015547122496, 3.062605050752245, 3.062907611519719, 3.063209240853655, 3.0635099425733574, 3.0638097204785764, 3.064108578349625, 3.0644065199474997, 3.064703549013999, 3.064999669271839, 3.065294884424773, 3.065589198157704, 3.065882614136803, 3.0661751360096208, 3.0664667674052013, 3.0667575119341963, 3.067047373188976, 3.067336354743737, 3.0676244601546196, 3.067911692959809, 3.0681980566796505, 3.0684835548167526, 3.068768190856098, 3.0690519682651467, 3.069334890493944, 3.069616960975224, 3.069898183124514, 3.0701785603402385, 3.0704580960038204, 3.0707367934797856, 3.0710146561158607, 3.0712916872430767, 3.0715678901758667, 3.071843268212167, 3.0721178246335135, 3.0723915627051404, 3.0726644856760776, 3.0729365967792472, 3.0732078992315577, 3.0734783962340004, 3.0737480909717454, 3.0740169866142306, 3.074285086315261, 3.0745523932130947, 3.074818910430541, 3.0750846410750468, 3.075349588238789, 3.075613754998766, 3.0758771444168835, 3.076139759540047, 3.076401603400246, 3.076662679014646, 3.0769229893856718, 3.0771825375010953, 3.0774413263341205, 3.0776993588434705, 3.077956637973469, 3.0782131666541273, 3.078468947801226, 3.0787239843163983, 3.0789782790872127, 3.079231834987253, 3.0794846548762034, 3.0797367415999233, 3.079988097990533, 3.08023872686649, 3.0804886310326696, 3.080737813280441, 3.080986276387748, 3.081234023119186, 3.081481056226077, 3.0817273784465478, 3.081972992505605, 3.0822179011152113, 3.082462106974359, 3.0827056127691455, 3.082948421172846, 3.083190534845989, 3.0834319564364265, 3.0836726885794086, 3.0839127338976535, 3.0841520950014205, 3.084390774488581, 3.0846287749446875, 3.0848660989430443, 3.085102749044778, 3.085338727798906, 3.0855740377424046, 3.0858086814002776, 3.086042661285623, 3.0862759798997037, 3.08650863973201, 3.0867406432603284, 3.0869719929508075, 3.087202691258023, 3.0874327406250432, 3.0876621434834925, 3.0878909022536183, 3.0881190193443517, 3.0883464971533727, 3.0885733380671736, 3.08879954446112, 3.089025118699514, 3.0892500631356565, 3.089474380111907, 3.089698071959746, 3.0899211409998353, 3.0901435895420772, 3.0903654198856754, 3.090586634319195, 3.090807235120619, 3.091027224557409, 3.0912466048865648, 3.0914653783546773, 3.091683547197992, 3.0919011136424617, 3.0921180799038055, 3.092334448187565, 3.0925502206891595, 3.092765399593943, 3.0929799870772565, 3.093193985304488, 3.093407396431123, 3.0936202226028, 3.093832465955365, 3.0940441286149234, 3.0942552126978966, 3.0944657203110713, 3.0946756535516537, 3.094885014507322, 3.095093805256277, 3.0953020278672962, 3.0955096843997816, 3.095716776903813, 3.095923307420199, 3.096129277980525, 3.0963346906072053, 3.096539547313531, 3.0967438501037217, 3.096947600972971, 3.0971508019074996, 3.0973534548846, 3.097555561872685, 3.0977571248313396, 3.097958145711362, 3.0981586264548158, 3.0983585689950752, 3.098557975256872, 3.098756847156341, 3.0989551866010667, 3.099152995490129, 3.0993502757141496, 3.099547029155334, 3.0997432576875212, 3.0999389631762244, 3.1001341474786765, 3.1003288124438746, 3.1005229599126243, 3.100716591717581, 3.100909709683296, 3.1011023156262563, 3.1012944113549317, 3.101485998669812, 3.101677079363453, 3.101867655220518, 3.102057728017818, 3.1022472995243526, 3.1024363715013545, 3.1026249457023276, 3.1028130238730873, 3.1030006077518038, 3.1031876990690392, 3.103374299547789, 3.1035604109035204, 3.103746034844215, 3.1039311730704044, 3.10411582727521, 3.1042999991443825, 3.1044836903563406]
        for x in x_range:
            self.assertAlmostEqual(y_range[x],  y_range_expected[x])
            
    
    
    
        
    
            
        
        
if __name__ == '__main__':
    global visualise
    visualise = False
    for i in range(1):
        unittest.main(exit = False)
